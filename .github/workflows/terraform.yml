# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terrafeorm Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculsative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
name: 'Terraform'

on:
  # workflow_dispatch:
  #   inputs:
  #     AWS_ROLE:
  #       description: "IAM Role ARN to assume"
  #       required: true
  # pull_request:
  push:
    branches: [ "main" ]

permissions:
  contents: read
  id-token: write
env:
  ACTIONS_STEP_DEBUG: true

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set Environment Variables
      env:
        GODADDY_API_KEY: ${{ secrets.GODADDY_API_KEY }}
        GODADDY_API_SECRET: ${{ secrets.GODADDY_API_SECRET }}
      run: |
        echo "Environment variables set"
        echo "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" # Just for debugging

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: arn:aws:iam::864899850759:role/knab-lab-tf-github-to-aws
        aws-region: eu-central-1

    ## # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
      continue-on-error: true

    # # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
